<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://kdefombelle.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kdefombelle.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-15T12:46:38+00:00</updated><id>https://kdefombelle.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">VirtualBox</title><link href="https://kdefombelle.github.io/blog/2022/virtualbox/" rel="alternate" type="text/html" title="VirtualBox"/><published>2022-09-27T16:00:00+00:00</published><updated>2022-09-27T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2022/virtualbox</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2022/virtualbox/"><![CDATA[<p>This post will go through the main elements to install a Linux image on VirtualBox to get a real Linux system on your host.</p> <h2 id="install-linux-on-virtualbox">Install Linux on VirtualBox</h2> <ul> <li>Install Oracle VirtualBox from <a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a></li> <li>Download a Linux image: <a href="https://getfedora.org/en/workstation/download/">Fedora</a>, <a href="https://rockylinux.org/">Rocky Linux</a>, <a href="http://isoredirect.centos.org/centos/7/isos/">CentOS</a></li> <li>Create a new VM based on this image: in VitualBox select New and pick the .iso of your choice</li> </ul> <h2 id="configure-linux">Configure Linux</h2> <h3 id="add-a-sudoer">Add a sudoer</h3> <p>Set user as sudoer as depicted on https://linuxize.com/post/how-to-add-user-to-sudoers-in-centos/.<br/> Add <code class="language-plaintext highlighter-rouge">username ALL=(ALL) NOPASSWD:ALL</code> at the end of <code class="language-plaintext highlighter-rouge">/etc/sudoers</code> <br/> You can edit via <code class="language-plaintext highlighter-rouge">visudo</code> as root (<code class="language-plaintext highlighter-rouge">sudo -i</code> to get a root prompt).</p> <h3 id="change-hostname">Change Hostname</h3> <p>cf. https://www.hostinger.com/tutorials/change-hostname-on-centos-7/. <code class="language-plaintext highlighter-rouge">hostnamectl set-hostname fedora.local</code></p> <h2 id="install-virtualbox-guest-addition">Install VirtualBox Guest Addition</h2> <p>It enables features like file sharing and copy/paste from/to your host.</p> <p>Start the VM.<br/> In Menu select <em>Devices&gt;Insert Guest Additions CD Image</em>.<br/> Configure a <strong>Shared folder</strong> with <em>Auto-mount</em> and <em>Make Permanent</em> ticked.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2022-09-28-vbox-ga-shared-folder.png"/> </div> </div> <p>Grant rights for you user on the vboxsf group to access the shared folder <code class="language-plaintext highlighter-rouge">sudo usermod -aG vboxsf $USER</code><br/> Configure <strong>Shared clipboard</strong> as <em>Bidirectional</em>.</p> <h2 id="optional-configure-linux-further">(Optional) Configure Linux Further</h2> <h3 id="install-handy-packages">Install handy packages</h3> <p>install <em>netstat</em>, <em>ifconfig</em> <code class="language-plaintext highlighter-rouge">sudo yum install net-tools -y</code><br/> install <em>lsof</em> <code class="language-plaintext highlighter-rouge">sudo yum install lsof -y</code><br/> install <em>bcc-tools</em></p> <ul> <li>“Kernel headers not found” error, cf. https://unix.stackexchange.com/a/568358/538394 <code class="language-plaintext highlighter-rouge">yum install "kernel-devel-uname-r == $(uname -r)" </code></li> <li>configure .bashrc <code class="language-plaintext highlighter-rouge">sudo yum install bcc-tools</code></li> </ul> <p>install <em>bzip2</em> <code class="language-plaintext highlighter-rouge">sudo yum install bzip2 -y</code></p> <h3 id="configure-bashrc">Configure .bashrc</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.bashrc
<span class="c"># Source global definitions</span>
<span class="nb">export </span><span class="nv">BCC_BIN</span><span class="o">=</span>/usr/share/bcc/tools
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$BCC_BIN</span>:<span class="nv">$PATH</span>
<span class="nb">alias </span><span class="nv">psudo</span><span class="o">=</span><span class="s2">"sudo env </span><span class="se">\"</span><span class="s2">PATH=</span><span class="nv">$PATH</span><span class="se">\"</span><span class="s2">"</span>
</code></pre></div></div> <h3 id="ssh">ssh</h3> <p>Let’s check first ssh is up and running or start it now</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl status sshd
systemctl <span class="nb">enable </span>sshd <span class="nt">--now</span> <span class="c">#start and register as auto-start ssh for next VM boot</span>
</code></pre></div></div> <p><strong>ssh</strong> can be configured using Bridged Adapter or NAT. Note service called ssh or sshd according your Linuc distribution.</p> <p>Most credit from <a href="https://www.golinuxcloud.com/ssh-into-virtualbox-vm/">here</a>.</p> <h4 id="using-bridged-adapter">Using Bridged Adapter</h4> <p><code class="language-plaintext highlighter-rouge">systemctl start sshd</code> https://www.golinuxcloud.com/ssh-into-virtualbox-vm</p> <div class="alert alert-danger" role="alert"><i class="fa fa-exclamation-circle"> Unfortunately this configuration has been proven sometimes instable and the brideg adapter network interface stops starting when rebooting the VM.</i></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2022-09-28-vbox-bridged-adapter.png"/> </div> </div> <p><br/></p> <h4 id="using-nat">Using NAT</h4> <p>To ssh in the guest machine on 127.0.0.1:2222</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2022-09-28-vbox-nat.png"/> </div> </div> <p><br/></p> <h2 id="faq">FAQ</h2> <h3 id="ubuntu-tips">Ubuntu tips</h3> <p>https://askubuntu.com/a/1119250 sudo su cd /media mkdir cdrom mount /dev/cdrom /media/cdrom cd cdrom sh VBoxLinuxAdditions.run</p> <p>“Kernel headers not found” yum install “kernel-devel-uname-r == $(uname -r)” https://unix.stackexchange.com/a/568358/538394</p> <h3 id="autoboot-of-network-interface">Autoboot of Network Interface</h3> <p>/etc/sysconfig/network-scripts/ifcfg-eth0 &gt; ONBOOT=yes <code class="language-plaintext highlighter-rouge">nmcli conn up</code> or <code class="language-plaintext highlighter-rouge">systemctl restart network.service</code> <a href="https://emcorrales.com/blog/how-to-enable-internet-access-on-centos7-virtualbox">https://emcorrales.com/blog/how-to-enable-internet-access-on-centos7-virtualbox</a> This will ensure you can ssh in your box.</p>]]></content><author><name></name></author><category term="linux"/><summary type="html"><![CDATA[This post will go through the main elements to install a Linux image on VirtualBox to get a real Linux system on your host.]]></summary></entry><entry><title type="html">A Typical Java CI Pipeline</title><link href="https://kdefombelle.github.io/blog/2021/java-pipeline/" rel="alternate" type="text/html" title="A Typical Java CI Pipeline"/><published>2021-06-07T16:00:00+00:00</published><updated>2021-06-07T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2021/java-pipeline</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2021/java-pipeline/"><![CDATA[<p>A simple article to discuss the typical Java CI pipeline.</p> <p>Java has always relied on a lot of 3rd parties, its ecosystem is huge and there is a library or a tool for almost everything.<br/> It is awesome for a passionated learner like me as it is never ending but it is also often a point brought by its detractors who claim it is an hindrance to its use or learning. Of course I still believe it is a great point to have such a rich ecosystem but I hear the point that some other languages like Golang are embedding more by default.</p> <p>We will here look at some of these excellent tools the Java landscape has in order to build a standard Java CI pipeline. We will use:</p> <ol> <li>a Java project (of course)</li> <li><a href="https://www.jacoco.org/jacoco/">JaCoCo</a> for test coverage</li> <li><a href="https://docs.sonarqube.org/latest/setup/install-server/">Sonar</a> for the static code analysis</li> <li><a href="https://www.sonatype.com/products/repository-oss">Nexus</a> as an artifact manager</li> <li><a href="https://www.jenkins.io/">Jenkins</a> for the CI in the context of this post</li> </ol> <p>We will build our project using maven and so will leverage maven plugins.</p> <div class="alert alert-primary d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg> <div class="blogalert"> <strong>Jenkins, Sonar, and Nexus servers are assumed preinstalled</strong> in your environment or organisation. Most are simple webapps to deploy and easy to configure or run. Only Sonar requires a database (I am using Postgres). </div> </div> <h2 id="1-the-java-project">1. The Java project</h2> <div class="alert alert-success d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg> <div class="blogalert"> A Java project having this confioguration can be found on my git repository, check it out here: <a href="https://github.com/kdefombelle/micronaut-sample">micronaut-sample</a>.<br/> You can anyway apply the exact same to any Java project built with maven. </div> </div> <p>I suggest we configure our project first to run our code coverage (JaCoCo), our static code (Sonar) analysis and the deployment of our artifacts on Nexus as all this can be run locally first before configuring Jenkins to automate it.</p> <h2 id="2-code-coverage-jacoco">2. Code Coverage: JaCoCo</h2> <p>We will use <a href="https://www.eclemma.org/jacoco/trunk/doc/maven.html">JaCoCo maven plugin</a></p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pom.xml
----------------
<span class="nt">&lt;build&gt;</span>
  (...)
  <span class="nt">&lt;properties&gt;</span>
  	<span class="nt">&lt;argLine&gt;&lt;/argLine&gt;</span> <span class="c">&lt;!-- for jacoco --&gt;</span>
  <span class="nt">&lt;/properties&gt;</span>
  (...)

  <span class="nt">&lt;plugin&gt;</span>
  	<span class="nt">&lt;groupId&gt;</span>org.jacoco<span class="nt">&lt;/groupId&gt;</span>
  	<span class="nt">&lt;artifactId&gt;</span>jacoco-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
  	<span class="nt">&lt;version&gt;</span>0.8.7<span class="nt">&lt;/version&gt;</span>
  	<span class="nt">&lt;executions&gt;</span>
  		<span class="nt">&lt;execution&gt;</span>
  			<span class="c">&lt;!-- bound to phase initialize by default --&gt;</span>
  			<span class="nt">&lt;phase&gt;</span>validate<span class="nt">&lt;/phase&gt;</span>
  			<span class="nt">&lt;id&gt;</span>jacoco-prepare<span class="nt">&lt;/id&gt;</span>
  			<span class="nt">&lt;goals&gt;</span>
  				<span class="nt">&lt;goal&gt;</span>prepare-agent<span class="nt">&lt;/goal&gt;</span>
  			<span class="nt">&lt;/goals&gt;</span>
  		<span class="nt">&lt;/execution&gt;</span>
  		<span class="nt">&lt;execution&gt;</span>
  			<span class="c">&lt;!-- bound to phase verify by default --&gt;</span>
  			<span class="c">&lt;!-- not used from CI but callable for local analysis --&gt;</span>
  			<span class="nt">&lt;id&gt;</span>jacoco-site<span class="nt">&lt;/id&gt;</span>
  			<span class="nt">&lt;goals&gt;</span>
  				<span class="nt">&lt;goal&gt;</span>report<span class="nt">&lt;/goal&gt;</span>
  			<span class="nt">&lt;/goals&gt;</span>
  		<span class="nt">&lt;/execution&gt;</span>
  	<span class="nt">&lt;/executions&gt;</span>
  <span class="nt">&lt;/plugin&gt;</span>
(...)
<span class="nt">&lt;/build&gt;</span>
</code></pre></div></div> <p>You can then run locally the following</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn verify
</code></pre></div></div> <p>and check the coverage has been generated as expected under <code class="language-plaintext highlighter-rouge">target/site/jacoco.index.html</code>; you should see a non 0 coverage as long as you have some unit tests executed.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-07-06-java-pipeline-jacoco.png"/> </div> </div> <p><br/></p> <p>Once the code coverage is working fine we can move to configure the Sonar analysis.</p> <h2 id="3-static-code-analysis-sonar">3. Static Code Analysis: Sonar</h2> <p>The sonar-maven-plugin will run sonar analysis and upload the results generated locally to the remote Sonar instance.<br/> This plugin reads below properties to do so, they can be defined for instance in a profile either in the project or more generally in your maven settings as it is likely you reuse this across projects.</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn-settings.xml
----------------
<span class="nt">&lt;profile&gt;</span>
    <span class="nt">&lt;id&gt;</span>sonar<span class="nt">&lt;/id&gt;</span>
    <span class="nt">&lt;properties&gt;</span>
      <span class="nt">&lt;sonar.host.url&gt;</span>http://{host}:{port}/<span class="nt">&lt;/sonar.host.url&gt;</span>
      <span class="nt">&lt;sonar.jdbc.driver&gt;</span>org.postgresql.Driver<span class="nt">&lt;/sonar.jdbc.driver&gt;</span>
      <span class="nt">&lt;sonar.jdbc.username&gt;</span>sonarqube<span class="nt">&lt;/sonar.jdbc.username&gt;</span>
      <span class="nt">&lt;sonar.jdbc.password&gt;</span>sonarqube<span class="nt">&lt;/sonar.jdbc.password&gt;</span>
    <span class="nt">&lt;/properties&gt;</span>
  <span class="nt">&lt;/profile&gt;</span>
</code></pre></div></div> <p>Then you can call to run the analysis and checks results are uploaded on your sonar</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn <span class="nt">-Psonar</span> sonar:sonar
</code></pre></div></div> <p>The sonar analysis has been executed, we retrieve our code coverage and many useful metrics.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-07-06-java-pipeline-sonar.png"/> </div> </div> <p><br/></p> <h2 id="4-nexus">4. Nexus</h2> <p>Once our project built, its artifacts will be deployed to Nexus. Its location is configures in the distributionManagement section in the project pom.xml as documented <a href="https://maven.apache.org/plugins/maven-deploy-plugin/usage.html">here</a> The credentials to authenticate against Nexus are registred in maven-settings.xml</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pom.xml
----------------
<span class="nt">&lt;distributionManagement&gt;</span>
    <span class="nt">&lt;repository&gt;</span>
        <span class="nt">&lt;id&gt;</span>maven-myorganisation-release<span class="nt">&lt;/id&gt;</span>
        <span class="c">&lt;!-- in general $maven-repo-name is suffixed by -release --&gt;</span>
        <span class="nt">&lt;url&gt;</span>http://{host}:{port}/repository/{maven-repo-name}/<span class="nt">&lt;/url&gt;</span>
    <span class="nt">&lt;/repository&gt;</span>
    <span class="nt">&lt;snapshotRepository&gt;</span>
        <span class="nt">&lt;id&gt;</span>maven-myorganisation-snapshot<span class="nt">&lt;/id&gt;</span>  
        <span class="c">&lt;!-- in general $maven-repo-name is suffixed by -snapshot --&gt;</span>
        <span class="nt">&lt;url&gt;</span>http://{host}:{port}/repository/{maven-repo-name}/<span class="nt">&lt;/url&gt;</span>
    <span class="nt">&lt;/snapshotRepository&gt;</span>
<span class="nt">&lt;/distributionManagement&gt;</span>
</code></pre></div></div> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>maven-settings.xml
----------------
<span class="nt">&lt;servers&gt;</span>
   <span class="nt">&lt;server&gt;</span>
      <span class="nt">&lt;id&gt;</span>nexus-snapshots<span class="nt">&lt;/id&gt;</span>
      <span class="nt">&lt;username&gt;</span>deployment<span class="nt">&lt;/username&gt;</span>
      <span class="nt">&lt;password&gt;</span>the_pass_for_the_deployment_user<span class="nt">&lt;/password&gt;</span>
   <span class="nt">&lt;/server&gt;</span>
<span class="nt">&lt;/servers&gt;</span>
</code></pre></div></div> <p>Then you can call to run the analysis and check the artifact is uploaded on your Nexus</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn jar:jar deploy:deploy
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-07-06-java-pipeline-nexus.png"/> </div> </div> <p><br/></p> <h2 id="jenkins">Jenkins</h2> <p>Jenkins is the conductor of the pipeline, it will execute the steps we will instruct it to. These steps are:</p> <ul> <li>fetch the code from github</li> <li>execute the Jenkinsfile in the project which contains the core of our pipeline.</li> </ul> <p>The <code class="language-plaintext highlighter-rouge">Jenkinsfile</code> has the following steps:</p> <ul> <li>Version control to fetch the code</li> <li>Build the project; this step will also generate our code coverage as if you remind we attached JaCoCo execution to validate phase.</li> <li>Run sonar Analysis</li> <li>Deploy our artifacts to Nexus</li> </ul> <h2 id="pipeline-file">Pipeline File</h2> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pipeline</span> <span class="p">{</span>
    <span class="nx">stages</span> <span class="p">{</span>
        <span class="nf">stage</span><span class="p">(</span><span class="dl">'</span><span class="s1">Version control</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">steps</span> <span class="p">{</span>
                <span class="nx">sh</span> <span class="dl">'</span><span class="s1">echo branch: ${BRANCH}</span><span class="dl">'</span>
                <span class="nx">git</span> <span class="nx">credentialsId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">kdefombelle</span><span class="dl">'</span><span class="p">,</span> <span class="nx">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">https://git.organisation.com/scm/~kdefombelle/micronaut-sample.git</span><span class="dl">'</span><span class="p">,</span> <span class="nx">branch</span><span class="p">:</span> <span class="dl">'</span><span class="s1">${BRANCH}</span><span class="dl">'</span>
                <span class="nx">sh</span> <span class="dl">'</span><span class="s1">ls -lrt</span><span class="dl">'</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nf">stage</span><span class="p">(</span><span class="dl">'</span><span class="s1">Build</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">steps</span> <span class="p">{</span>
                <span class="nf">configFileProvider</span><span class="p">([</span><span class="nf">configFile</span><span class="p">(</span><span class="nx">fileId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mvn-settings</span><span class="dl">'</span><span class="p">,</span> <span class="nx">variable</span><span class="p">:</span> <span class="dl">'</span><span class="s1">MAVEN_SETTINGS_XML</span><span class="dl">'</span><span class="p">)])</span> <span class="p">{</span>
                    <span class="nx">sh</span> <span class="dl">'</span><span class="s1">echo maven settings: $MAVEN_SETTINGS_XML</span><span class="dl">'</span>
                    <span class="c1">//-B,--batch-mode</span>
                    <span class="nx">sh</span> <span class="dl">'</span><span class="s1">mvn -B -s $MAVEN_SETTINGS_XML clean install</span><span class="dl">'</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nf">stage</span><span class="p">(</span><span class="dl">'</span><span class="s1">QA</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">steps</span> <span class="p">{</span>
                <span class="nf">configFileProvider</span><span class="p">([</span><span class="nf">configFile</span><span class="p">(</span><span class="nx">fileId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mvn-settings</span><span class="dl">'</span><span class="p">,</span> <span class="nx">variable</span><span class="p">:</span> <span class="dl">'</span><span class="s1">MAVEN_SETTINGS_XML</span><span class="dl">'</span><span class="p">)])</span> <span class="p">{</span>
                    <span class="nx">sh</span> <span class="dl">'</span><span class="s1">echo maven settings: $MAVEN_SETTINGS_XML</span><span class="dl">'</span>
                    <span class="nx">sh</span> <span class="dl">'</span><span class="s1">mvn -B -s $MAVEN_SETTINGS_XML -Psonar sonar:sonar</span><span class="dl">'</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nf">stage</span><span class="p">(</span><span class="dl">'</span><span class="s1">Deploy</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">steps</span> <span class="p">{</span>
                <span class="nf">configFileProvider</span><span class="p">([</span><span class="nf">configFile</span><span class="p">(</span><span class="nx">fileId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mvn-settings</span><span class="dl">'</span><span class="p">,</span> <span class="nx">variable</span><span class="p">:</span> <span class="dl">'</span><span class="s1">MAVEN_SETTINGS_XML</span><span class="dl">'</span><span class="p">)])</span> <span class="p">{</span>
                    <span class="nx">sh</span> <span class="dl">'</span><span class="s1">echo maven settings: $MAVEN_SETTINGS_XML</span><span class="dl">'</span>
                    <span class="c1">//https://stackoverflow.com/questions/6308162/maven-the-packaging-for-this-project-did-not-assign-a-file-to-the-build-artifac</span>
                    <span class="c1">//calling jar:jar before deploy:deploy sets some info in context to enable deploy:deploy to work (but does not recreate the jar)</span>
                    <span class="c1">//quicker than simply -Dmaven.test.skip=true</span>
                    <span class="nx">sh</span> <span class="dl">'</span><span class="s1">mvn -B -s $MAVEN_SETTINGS_XML jar:jar deploy:deploy</span><span class="dl">'</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="jenkins-job-configuration">Jenkins Job Configuration</h2> <p>Jenkins configuration is very light as it will simply read the pipeline file <code class="language-plaintext highlighter-rouge">Jenkinsfile</code> from your repository and execute it.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-07-06-java-pipeline-jenkins.png"/> </div> </div> <p><br/> Once configured we can run our job and enjoy the full automation</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-07-06-java-pipeline-jenkins-execution.png"/> </div> </div> <p><br/> You can then check that your sonar analysis has been refreshed and your artifact(s) deployed on your repository manager, here Nexus. Last but not least our fresh artifact is now stored on Nexus.</p> <h3 id="jenkins-server-configuration">Jenkins Server Configuration</h3> <p>Depending how your job are executed git and maven should be configured in Jenkins or on the server the jobs are executed. In my case the CI jobs are executed in the cloud within docker images and so some extra configuration is necessary. Also you may have noticed the pipeline refers to the identifiers of the git account and maven configuration.</p> <ul> <li><strong>Git account</strong> to fetch the code In the Jenkins left menu click on <em>Configure Credentials</em>, define a new credentials clicking like below and assign it an ID, this credentials ID will be used in the Pipeline to connect to git (in my case <strong>kdefombelle</strong>).</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-07-06-java-pipeline-jenkins-credentials.png"/> </div> </div> <p><br/></p> <ul> <li><strong>Maven configuration</strong> f like me your CI jobs are executed in the cloud <em>Manage Jenkins &gt; Managed files &gt; Add a new Config</em> (in the left menu) and fill setting here again an ID, here <strong>mvn-settings</strong></li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-07-06-java-pipeline-jenkins-maven.png"/> </div> </div> <p><br/></p>]]></content><author><name></name></author><category term="devops"/><category term="java"/><category term="sonar"/><category term="jenkins"/><category term="nexus"/><category term="maven"/><summary type="html"><![CDATA[A simple article to discuss the typical Java CI pipeline.]]></summary></entry><entry><title type="html">Vue.js Getting Started</title><link href="https://kdefombelle.github.io/blog/2021/vue-getting-started/" rel="alternate" type="text/html" title="Vue.js Getting Started"/><published>2021-05-27T16:00:00+00:00</published><updated>2021-05-27T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2021/vue-getting-started</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2021/vue-getting-started/"><![CDATA[<div class="alert alert-success d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg> <div class="blogalert"> Note this sample application can be found on my git repository, check it out <a class="alert-link" href="https://github.com/kdefombelle/vuejs-getting-started">here</a> </div> </div> <p>Beside Angular and React the colossus frameworks for front-end these days, <strong>Vue.js</strong> is the last born and it learnt from its famous predecessors.<br/></p> <p>All these frameworks are great and the choice can be based on the purpose (brand new app, demo, refactoring of a legacy app), the context (team size, degree of collaboration/delegation, practices in place) or simply your taste: in any case you will pick a great framework!</p> <p>Join me in this article to onboard with <strong>Vue.js</strong>; we will explore the cli, the standard sections of a Vue component, how to exchange information between child and parent components and finally how to use slots to embed html within another piece of html.</p> <p><strong>This article has been written using Vue 2</strong> which has the time of the writing is still mainstream and has the widest ecosystem (especially <a href="https://vuetifyjs.com/">vuetify</a> is not yet compliant with Vue 3).</p> <h2 id="installation">Installation</h2> <p>Given you have <code class="language-plaintext highlighter-rouge">node</code> already installed, otherwise refer to my <a href="../../2021/npm-cheat-sheet">post</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> @vue/cli <span class="c">#cli to scaffold your project</span>
</code></pre></div></div> <p>You can then create your first project</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vue create my-project <span class="o">&amp;&amp;</span> <span class="nb">cd </span>my-project <span class="c">#keep default settings, especially Vue 2</span>
npm run serve
</code></pre></div></div> <div class="alert alert-warning d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg> <div class="blogalert"> <strong>Having connectivity issues with cli?</strong><br/>you may want to change to set `"useTaobaoRegistry": false` in your `~/.vuerc` file </div> </div> <h2 id="development-resources">Development Resources</h2> <p>Install VSCode plugin <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a></p> <p>Install <a href="https://devtools.vuejs.org/">Vue Devtools</a> Browser extension or standalone if you are developing on Electron platform)</p> <h2 id="vue-component">Vue Component</h2> <p>At the core of View.js there is the vue component: the <code class="language-plaintext highlighter-rouge">.vue</code> file. It is one file made of 3 parts that will be split by the framework later:</p> <ul> <li>an HTML template</li> <li>a script part</li> <li>a style part</li> </ul> <p>Each part is examplified separately, but remember it is one unique file Finally you can also create pieces of code resuable across your components: they are called <strong>mixins</strong></p> <h3 id="html-template">HTML Template</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"content"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">v-once</span><span class="nt">&gt;&lt;h1&gt;</span>{{ pageTitle }}<span class="nt">&lt;/h1&gt;&lt;/div&gt;</span>

    <span class="c">&lt;!-- Directives --&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"top"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h2&gt;</span>Core Directives<span class="nt">&lt;/h2&gt;</span>
      <span class="nt">&lt;button</span> <span class="err">@</span><span class="na">click=</span><span class="s">"toggleDisplay()"</span><span class="nt">&gt;</span>@click to toggle display<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;div&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">v-if=</span><span class="s">"display"</span><span class="nt">&gt;</span>Conditional display with <span class="nt">&lt;b&gt;</span>v-if<span class="nt">&lt;/b&gt;&lt;/span&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">v-show=</span><span class="s">"display"</span><span class="nt">&gt;</span>Conditional with <span class="nt">&lt;b&gt;</span>v-show<span class="nt">&lt;/b&gt;&lt;/span&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;div&gt;&lt;b&gt;</span>v-for<span class="nt">&lt;/b&gt;</span> example<span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;table&gt;</span>
          <span class="nt">&lt;tr&gt;</span>
            <span class="nt">&lt;th&gt;</span>index<span class="nt">&lt;/th&gt;</span>
            <span class="nt">&lt;th&gt;</span>value<span class="nt">&lt;/th&gt;</span>
          <span class="nt">&lt;/tr&gt;</span>
          <span class="nt">&lt;tr</span> <span class="na">v-for=</span><span class="s">"(element, index) in collection"</span> <span class="na">:key=</span><span class="s">"index"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;td&gt;</span>{{ index }}<span class="nt">&lt;/td&gt;</span>
            <span class="nt">&lt;td&gt;</span>{{ element }}<span class="nt">&lt;/td&gt;</span>
          <span class="nt">&lt;/tr&gt;</span>
        <span class="nt">&lt;/table&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="c">&lt;!-- Child Component --&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"middle"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h2&gt;</span>Child Component<span class="nt">&lt;/h2&gt;</span>
      <span class="nt">&lt;select</span> <span class="na">v-model=</span><span class="s">"selectedColor"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;option</span> <span class="na">disabled</span> <span class="na">value=</span><span class="s">""</span><span class="nt">&gt;</span>Please select one color<span class="nt">&lt;/option&gt;</span>
        <span class="nt">&lt;option&gt;</span>red<span class="nt">&lt;/option&gt;</span>
        <span class="nt">&lt;option&gt;</span>green<span class="nt">&lt;/option&gt;</span>
      <span class="nt">&lt;/select&gt;</span>
      <span class="nt">&lt;br/&gt;</span>
      <span class="nt">&lt;br/&gt;</span>
      <span class="nt">&lt;ChildComponent</span> <span class="na">:color=</span><span class="s">"selectedColor"</span> <span class="err">@</span><span class="na">childEvent=</span><span class="s">"v =&gt; childCounter=v"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;br/&gt;</span>
      <span class="nt">&lt;div&gt;</span>Click number <span class="nt">&lt;b&gt;&lt;/b&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="c">&lt;!-- About Styles --&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bottom"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div&gt;</span>
        <span class="nt">&lt;h2&gt;</span>Style Examples<span class="nt">&lt;/h2&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;button</span> <span class="err">@</span><span class="na">click=</span><span class="s">"toggleColors()"</span><span class="nt">&gt;</span>Toggle borders<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">:style=</span><span class="s">"borderCssStyle"</span><span class="nt">&gt;</span>title <span class="nt">&lt;code&gt;</span>:style<span class="nt">&lt;/code&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">:style=</span><span class="s">"[borderCssStyle, 'custom-title']"</span><span class="nt">&gt;</span>title <span class="nt">&lt;code&gt;</span>:style<span class="nt">&lt;/code&gt;</span> array<span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">:class=</span><span class="s">"{'green-border': green}"</span><span class="nt">&gt;</span>title <span class="nt">&lt;code&gt;</span>:class<span class="nt">&lt;/code&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">:class=</span><span class="s">"[borderCssClass, 'custom-title']"</span><span class="nt">&gt;</span>title <span class="nt">&lt;code&gt;</span>:class<span class="nt">&lt;/code&gt;</span> array<span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;/template&gt;</span>
</code></pre></div></div> <h3 id="script">Script</h3> <p>The script part is the richest as of course this is were will sit most of the logic.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">ChildComponent</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./ChildComponent.vue</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">HelperMixin</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./HelperMixin</span><span class="dl">'</span>

<span class="kd">function</span> <span class="nf">functionX</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">functionX: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">v</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
	<span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">FirstComponent</span><span class="dl">"</span><span class="p">,</span> <span class="c1">//best practice: a 2 words name</span>
	<span class="nf">created</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//cf. lifecycle diagram https://vuejs.org/v2/guide/instance.html</span>
		<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Component created</span><span class="dl">'</span><span class="p">);</span>
	<span class="p">},</span>
	<span class="na">components</span><span class="p">:</span> <span class="p">{</span><span class="nx">ChildComponent</span><span class="p">},</span>
	<span class="nf">data</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//note data() is a function</span>
		<span class="k">return</span> <span class="p">{</span>
			<span class="na">pageTitle</span><span class="p">:</span> <span class="dl">"</span><span class="s2">FirstComponent</span><span class="dl">"</span><span class="p">,</span>
			<span class="na">childCounter</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
			<span class="na">display</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
			<span class="na">collection</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">element1</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">element2</span><span class="dl">'</span><span class="p">],</span>
			<span class="na">selectedColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">,</span>
			<span class="na">green</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="p">};</span>
	<span class="p">},</span>
	<span class="na">mixins</span><span class="p">:</span> <span class="p">[</span><span class="nx">HelperMixin</span><span class="p">],</span>
	<span class="na">computed</span><span class="p">:</span> <span class="p">{</span>
			<span class="nf">borderCssStyle</span><span class="p">()</span> <span class="p">{</span>
				<span class="k">return</span> <span class="p">{</span>
					<span class="na">border</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">green</span> <span class="p">?</span>
						<span class="dl">'</span><span class="s1">1px solid </span><span class="dl">'</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">selectedColor</span> <span class="p">:</span>
						<span class="dl">''</span><span class="p">,</span>
				<span class="p">};</span>
			<span class="p">},</span>
			<span class="nf">borderCssClass</span><span class="p">()</span> <span class="p">{</span>
				<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">green</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">selectedColor</span><span class="o">+</span><span class="dl">'</span><span class="s1">-border</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">''</span><span class="p">;</span>
			<span class="p">},</span>
	<span class="p">},</span>
	<span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
		<span class="nf">toggleDisplay</span><span class="p">()</span> <span class="p">{</span>
			<span class="nf">functionX</span><span class="p">(</span><span class="dl">"</span><span class="s2">toggleDisplay</span><span class="dl">"</span><span class="p">);</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="o">!</span> <span class="k">this</span><span class="p">.</span><span class="nx">display</span><span class="p">;</span>
		<span class="p">},</span>
		<span class="nf">toggleColors</span><span class="p">()</span> <span class="p">{</span>
			<span class="nf">functionX</span><span class="p">(</span><span class="dl">"</span><span class="s2">toggleColors</span><span class="dl">"</span><span class="p">);</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">green</span> <span class="o">=</span> <span class="o">!</span> <span class="k">this</span><span class="p">.</span><span class="nx">green</span><span class="p">;</span>
		<span class="p">},</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div> <h3 id="styles">Styles</h3> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* global styles, usually only in App.vue only */</span>
<span class="o">&lt;</span><span class="nt">style</span><span class="o">&gt;</span>
<span class="nt">button</span><span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
	<span class="nl">background-color</span><span class="p">:</span> <span class="no">green</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>

<span class="c">/* scope your style to be applied only in current component */</span>
<span class="c">/* You can use SAAS simply adding lang attribute */</span>
<span class="o">&lt;</span><span class="nt">style</span> <span class="nt">scoped</span><span class="o">&gt;</span>
<span class="nc">.content</span> <span class="p">{</span>
	<span class="nl">align-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
	<span class="nl">background</span><span class="p">:</span> <span class="n">linear-gradient</span><span class="p">(</span><span class="n">to</span> <span class="nb">bottom</span><span class="p">,</span><span class="no">white</span><span class="p">,</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">203</span><span class="p">,</span> <span class="m">235</span><span class="p">,</span> <span class="m">203</span><span class="p">));</span>
	<span class="nl">background-attachment</span><span class="p">:</span> <span class="nb">fixed</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.top</span> <span class="p">{</span>
	<span class="nl">align-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.custom-title</span> <span class="p">{</span>
	<span class="nl">font-style</span><span class="p">:</span> <span class="nb">italic</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.green-border</span> <span class="p">{</span>
	<span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">darkgreen</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.red-border</span> <span class="p">{</span>
	<span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">table</span> <span class="p">{</span>
	<span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
	<span class="nl">display</span><span class="p">:</span> <span class="nb">inline-table</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</code></pre></div></div> <h3 id="mixins">Mixins</h3> <p>Simply export the code you want to factorise and import that mixin in every component you need it. e.g.: a lifecycle hook</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
	<span class="nf">updated</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Component updated</span><span class="dl">'</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="communicating-with-child-component">Communicating with Child Component</h2> <p>A Child component <em>ChildComponent</em> can be leveraged in a parent one as <code>&lt;ChildComponent/&gt;</code>. It can also receive <strong>properties</strong> from its parent <br/> In the other way around the child component can <strong>emit</strong> event to send back information to its parent.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//in parent component
<span class="nt">&lt;ChildComponent</span> <span class="na">:color=</span><span class="s">"colorVariable"</span> <span class="na">alignment=</span><span class="s">"left"</span> <span class="err">@</span><span class="na">childEvent=</span><span class="s">"v =&gt; attributeChild1=v"</span><span class="nt">/&gt;</span>
</code></pre></div></div> <p>Note that <code class="language-plaintext highlighter-rouge">:color</code> will be bound to a variable whereas <code class="language-plaintext highlighter-rouge">alignment</code> is the constant value “left” passed to the child, and so does not have the <code class="language-plaintext highlighter-rouge">:</code>.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
	<span class="nt">&lt;div&gt;</span>
		(...)
		<span class="nt">&lt;ChildComponent</span> <span class="na">:color=</span><span class="s">"selectedColor"</span> <span class="na">alignment=</span><span class="s">"center"</span> <span class="err">@</span><span class="na">childEvent=</span><span class="s">"v =&gt; childCounter=v"</span><span class="nt">/&gt;</span>
	<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/template&gt;</span>

<span class="nt">&lt;script&gt;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
	<span class="na">props</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">color</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">alignment</span><span class="dl">'</span><span class="p">],</span>
	<span class="nf">data</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">{</span> <span class="na">attributeChild1</span><span class="p">:</span> <span class="dl">"</span><span class="s2">any content</span><span class="dl">"</span> <span class="p">};</span>
	<span class="p">},</span>
	<span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
		<span class="nf">sendEvent</span><span class="p">(){</span>
			<span class="k">this</span><span class="p">.</span><span class="nf">$emit</span><span class="p">(</span><span class="dl">"</span><span class="s2">childEvent</span><span class="dl">"</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">attributeChild1</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;style </span><span class="na">scoped</span><span class="nt">&gt;</span>
<span class="nc">.red</span> <span class="nt">div</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.blue</span> <span class="nt">div</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.centered</span> <span class="nt">div</span> <span class="p">{</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.left</span> <span class="nt">div</span> <span class="p">{</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div> <p>You can also add some <strong>validation</strong> changing the way you declate the <code class="language-plaintext highlighter-rouge">props</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">props</span><span class="p">:</span> <span class="p">{</span>
		<span class="nl">color</span><span class="p">:</span> <span class="p">{</span>
			<span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
			<span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
			<span class="nf">validator</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">return</span> <span class="p">[</span><span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">green</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">].</span><span class="nf">includes</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
				<span class="p">}</span>
		<span class="p">},</span>
		<span class="nx">alignment</span><span class="p">:</span> <span class="p">{</span>
			<span class="nl">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
			<span class="nx">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">},</span>
</code></pre></div></div> <h2 id="css-inheritance">CSS inheritance</h2> <p>A parent component can (within <em>scoped</em> CSS) define styles that will be applied to a child component,</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"color:red"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;ChildComponent/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <p>There is a subtle nuance to understand here: <em>scoped</em> style are not aplied out of the scope but CSS inheritance is still there, for instance here color will be inherited but border style for instance would not be as it is not natively inherited in CSS.</p> <p>Also the parent component can target CSS classes that are in any level down to it with the <strong>deep selector</strong></p> <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.class1</span> <span class="o">&gt;&gt;&gt;</span> <span class="nc">.class2</span> <span class="p">{</span>	<span class="err">/*</span> <span class="err">.class1</span> <span class="err">/deep/</span> <span class="err">.class2</span> <span class="err">is</span> <span class="err">the</span> <span class="err">syntax</span> <span class="err">for</span> <span class="err">other</span> <span class="err">CSS</span> <span class="err">pre</span> <span class="err">processors</span>
	<span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="slots">Slots</h2> <p>Vue.js slots enables to embed HTML within anoter HTML: the HTML you will provide in the <code class="language-plaintext highlighter-rouge">slot</code> tag will be surrounded by existing and resuable HTML.</p> <p>Let’s take an example; let’s say I have a nice remark div I want to use at several locations in my app to display some remarks.</p> <p>I can define a <em>RemarkFrame</em> component as follows inclucing a <code>&lt;slot&gt;</code> balise. This where the content I want to place will be injected to substitute the slot.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
	<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"remark"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;slot&gt;</span>Default content<span class="nt">&lt;/slot&gt;</span> <span class="c">&lt;!-- content can be injected here from another component --&gt;</span>
	<span class="nt">&lt;div&gt;</span>
<span class="nt">&lt;/template&gt;</span>

<span class="nt">&lt;script&gt;</span>
<span class="k">export</span> <span class="k">default </span><span class="p">({</span>
		<span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">RemarkFrame</span><span class="dl">"</span><span class="p">,</span>
		<span class="nf">data</span><span class="p">()</span> <span class="p">{</span>
		<span class="p">},</span>
<span class="p">})</span>
<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;style </span><span class="na">scoped</span><span class="nt">&gt;</span>
<span class="nc">.remark</span> <span class="p">{</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
	<span class="nl">border</span><span class="p">:</span> <span class="m">0.1px</span> <span class="nb">solid</span> <span class="n">grey</span><span class="p">;</span>
	<span class="nl">background-color</span><span class="p">:</span> <span class="m">#ddffdd</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div> <p>I can then use this <em>RemarkFrame</em> element from another component as follows</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
	<span class="nt">&lt;RemarkFrane&gt;</span>
		<span class="nt">&lt;div&gt;</span>This div comment will be injected in the slot of RemarkFrame<span class="nt">&lt;/div&gt;</span>
	<span class="nt">&lt;RemarkFrane&gt;</span>
	<span class="nt">&lt;RemarkFrane/&gt;</span> <span class="c">&lt;!-- with an empty HTML content the slot will show its default content --&gt;</span>
<span class="nt">&lt;/template&gt;</span>

<span class="nt">&lt;script&gt;</span>
<span class="k">import</span> <span class="nx">RemarkFrame</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./RemarkFrame.vue</span><span class="dl">"</span>
<span class="k">export</span> <span class="k">default </span><span class="p">({</span>
		<span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">MyComponent</span><span class="dl">"</span><span class="p">,</span>
		<span class="nf">data</span><span class="p">()</span> <span class="p">{</span>
		<span class="p">},</span>
		<span class="na">components</span><span class="p">:</span> <span class="p">{</span><span class="nx">RemarkFrame</span><span class="p">},</span>
<span class="p">})</span>
<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;style/&gt;</span>
</code></pre></div></div> <h2 id="directives">Directives</h2> <table class="table"> <colgroup> <col width="10%"/> <col width="40%"/> <col width="50%"/> </colgroup> <thead class="thead-light"> <tr> <th>Directive</th> <th>Description</th> <th>Example</th> </tr> </thead> <tbody> <tr> <td><code>class</code></td> <td>Apply conditionally a CSS class</td> <td> <code>&lt;div :class=&quot;{&apos;red-border&apos;: display}&quot;&gt;Title&lt;/div&gt;</code><br/> <code>&lt;div :class=[borderCssClass, more]&quot;&gt;Title&lt;/div&gt;</code> </td> </tr> <tr> <td><code>style</code></td> <td>Apply a parameterised style </td> <td> <code>&lt;div :style=&quot;borderStyle&quot;&gt;Title&lt;/div&gt;</code><br/> <code>&lt;div :style=&quot;[borderStyle, more]&quot;&gt;Title&lt;/div&gt;</code> </td> </tr> <tr> <td><code>v-bind</code></td> <td>Bind a <i>variable</i> (similar to interpolation with moustache expressions)</td> <td> <code>&lt;img v-bind:src=&quot;&quot;&gt;&lt;/image&gt;</code><br/> <code>&lt;img :src=&quot;&quot;&gt;&lt;/image&gt;</code> </td> </tr> <tr> <td><code>v-for</code></td> <td>Iterate over an array<br/> Do not combine with <code>v-if</code> on same te same element (perf warning) </td> <td> <code>&lt;tr v-for=&quot;(element, index) in collection&quot; :key=&quot;index&quot;&gt;</code> </td> </tr> <tr> <td><code>v-if</code></td> <td>Conditional display: adding/removing from DOM</td> <td> <code>&lt;span v-if=&quot;display&quot;&gt;Conditionallay&lt;/span&gt;</code> </td> </tr> <tr> <td><code>v-model</code></td> <td>Create a two way bindings between an <i>html element value</i>and a <i>variable</i></td> <td> <code>&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</code> </td> </tr> <tr> <td><code>v-on</code></td> <td>Bind to a <i>method</i> or an <i>event</i></td> <td> <code>&lt;button v-on:click=&quot;method1()&quot;&gt;Click&lt;/button&gt;</code> <code>&lt;button @click=&quot;method1()&quot;&gt;Click&lt;/button&gt;</code> </td> </tr> <tr> <td><code>v-once</code></td> <td>Display once only a value not expected to change</td> <td> <code>&lt;div v-once class=&quot;title&quot;&gt;&lt;/div&gt;</code> </td> </tr> <tr> <td><code>v-show</code></td> <td>Conditional display: via <code>styling display</code><br/> To privilege over <code>v-if</code> if the content is costly to render </td> <td> <code>&lt;span v-show=&quot;display&quot;&gt;Conditional&lt;/span&gt;</code> </td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="vue"/><category term="javascript"/><category term="framework"/><summary type="html"><![CDATA[Note this sample application can be found on my git repository, check it out here]]></summary></entry><entry><title type="html">NPM Cheat Sheet</title><link href="https://kdefombelle.github.io/blog/2021/npm-cheat-sheet/" rel="alternate" type="text/html" title="NPM Cheat Sheet"/><published>2021-05-24T16:00:00+00:00</published><updated>2021-05-24T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2021/npm-cheat-sheet</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2021/npm-cheat-sheet/"><![CDATA[<h2 id="installation">Installation</h2> <p>Install using a <a href="http://npm.github.io/installation-setup-docs/installing/using-a-node-version-manager.html">node version manager</a></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
nvm <span class="nt">--version</span>
</code></pre></div></div> <p>Then you can install the latest <code class="language-plaintext highlighter-rouge">node</code> version and update <code class="language-plaintext highlighter-rouge">npm</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nb">install </span>node
node <span class="nt">-v</span>
npm <span class="nb">install </span>npm@latest <span class="nt">-g</span>
npm <span class="nt">-v</span>
</code></pre></div></div> <h2 id="configuration">Configuration</h2> <table class="table"> <colgroup> <col width="50%"/> <col width="50%"/> </colgroup> <thead class="thead-light"> <tr> <th>Command</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td> <code>npm config list</code> </td> <td>list configuration</td> </tr> <tr> <td> <code>npm config list ls -l | grep strict-ssl</code> </td> <td>list configuration including all default (and grep strict-ssl property)</td> </tr> <tr> <td> <code>npm config set strict-ssl false</code> </td> <td>set a property</td> </tr> <tr> <td> <code>npm config set registry http://registry.npmjs.org/</code> </td> <td>set a property registry (defult is https)</td> </tr> <tr> <td> <code>npm config rm strict-ssl</code> </td> <td>delete a property, its default value still applies</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="javascript"/><category term="npm"/><summary type="html"><![CDATA[Installation Install using a node version manager curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash nvm --version]]></summary></entry><entry><title type="html">CSRF</title><link href="https://kdefombelle.github.io/blog/2021/csrf/" rel="alternate" type="text/html" title="CSRF"/><published>2021-05-22T16:00:00+00:00</published><updated>2021-05-22T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2021/csrf</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2021/csrf/"><![CDATA[<p>For any application authentication topic is recurrent. How will I manage authentication and subsequent calls are secured to my application. Growing footprint of stateless applications made the use of JWT token very popular, they are easy to generate and to verify.</p> <p>Below I summarised my readings about CSRF to see how a standard application can be secured against CSRF.</p> <h3 id="what-is-csrf">What is CSRF</h3> <p>CSRF (or XSRF) stands for <em>cross site request forgery</em>, it is a way for one to impersonate an authenticated user and send (evil) requests on his behalf. For a more lengthy but very insightful description refer to <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html">OSWASP</a> site on the topic.</p> <p>As on image is often worth more than any explanation here it is</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-05-21-csrf.png"/> </div> </div> <p><br/></p> <h3 id="how-to-prevent-csrf">How to prevent CSRF</h3> <p>2 criteria are important to understand how to prevent CSRF attacks.</p> <ul> <li>There are 2 main types of request websites are emitting: <code class="language-plaintext highlighter-rouge">standard requests</code> (e.g.: form submission), and <code class="language-plaintext highlighter-rouge">Ajax / XHR requests</code></li> <li>It depends the architecture of your application whether it is <code class="language-plaintext highlighter-rouge">stateless</code> or <code class="language-plaintext highlighter-rouge">stateful</code></li> </ul> <p>Standard designs involve a CSRF token</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-05-23-csrf-token.png"/> </div> </div> <p><br/> If the website can be stateful (even only for this security handling via db or a redis) the <code class="language-plaintext highlighter-rouge">synchronizer token pattern</code> is often used; otherwise the <code class="language-plaintext highlighter-rouge">double summit cookie</code> pattern is used.</p> <p>Standard requests are usually protected sending along a custom HTTP header which can be retrieved from an hidden field in the form.</p> <figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/transfer.do"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"hidden"</span> <span class="na">name=</span><span class="s">"CSRFToken"</span> <span class="na">value=</span><span class="s">"OWY4NmQwODE4ODRjN2Q2NTlhMmZ...=="</span><span class="nt">&gt;</span>
[...]
<span class="nt">&lt;/form&gt;</span></code></pre></figure> <p>For Ajax requests which do not have access to form input fields they are passing an extra parameters. This extra parameter value comes from the server, it can be returned in a cookie that only a client from the same origin can read and so send back in a HTTP header the value. The server can then check the value in the cookie and in the header are matching.</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text/javascript</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="kd">var</span> <span class="nx">csrf_token</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">meta[name='csrf-token']</span><span class="dl">"</span><span class="p">).</span><span class="nf">getAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">content</span><span class="dl">"</span><span class="p">);</span>

    <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">post</span><span class="p">[</span><span class="dl">'</span><span class="s1">anti-csrf-token</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">csrf_token</span><span class="p">;</span>
    <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">put</span><span class="p">[</span><span class="dl">'</span><span class="s1">anti-csrf-token</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">csrf_token</span><span class="p">;</span>
    <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="k">delete</span><span class="p">[</span><span class="dl">'</span><span class="s1">anti-csrf-token</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">csrf_token</span><span class="p">;</span>
    <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">patch</span><span class="p">[</span><span class="dl">'</span><span class="s1">anti-csrf-token</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">csrf_token</span><span class="p">;</span>

    <span class="c1">// Axios does not create an object for TRACE method by default, and has to be created manually.</span>
    <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">trace</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="nx">axios</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">headers</span><span class="p">.</span><span class="nx">trace</span><span class="p">[</span><span class="dl">'</span><span class="s1">anti-csrf-token</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">csrf_token</span>
<span class="o">&lt;</span><span class="sr">/script&gt;</span></code></pre></figure> <p>It prevents an attacker to send the same token as it cannot read the cookie content - as his website is from a different origin. The cookied used to send back the token is a first party cookie, so a <a href="https://web.dev/samesite-cookies-explained/">SameSite cookie</a> makes sense here (SameSite=Strict).</p> <p><a href="https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html">Spring security</a> discusses this topic further and <a href="https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html">Angular</a> brings more about Ajax calls.</p>]]></content><author><name></name></author><category term="architecture"/><category term="csrf"/><summary type="html"><![CDATA[For any application authentication topic is recurrent. How will I manage authentication and subsequent calls are secured to my application. Growing footprint of stateless applications made the use of JWT token very popular, they are easy to generate and to verify.]]></summary></entry><entry><title type="html">Windows Subsystem for Linux</title><link href="https://kdefombelle.github.io/blog/2021/wsl/" rel="alternate" type="text/html" title="Windows Subsystem for Linux"/><published>2021-05-22T16:00:00+00:00</published><updated>2021-05-22T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2021/wsl</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2021/wsl/"><![CDATA[<p>A quick note about the installation of windows subsystem for Linux because it simply rocks!</p> <h1 id="what-is-wsl">What is WSL</h1> <p>First and foremost what is this Windows Linux Subsystem? Let me simply quote Microsoft documentation here:</p> <div><i> "The Windows Subsystem for Linux lets developers run a GNU/Linux environment -- including most command-line tools, utilities, and applications -- directly on Windows, unmodified, without the overhead of a traditional virtual machine or dual-boot setup"</i> </div> <p><br/></p> <h1 id="wsl-installation-on-windows-10">WSL Installation on Windows 10</h1> <h3 id="default-installation-recommended">Default Installation (Recommended)</h3> <ol> <li>Check your windows build ID <blockquote> <p>Window+R, type <code class="language-plaintext highlighter-rouge">winver</code>, Build should 19041 or higher.</p> </blockquote> <p>Either you will have to upgrade or you can proceed directly.</p> <ul> <li>Follow the steps from <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps">Microsoft installation notes</a>; they are very clear and quick</li> <li>running a few (to be copy / pasted) Powershell commands in <em>admin</em> mode</li> <li>install Linux kernel update package</li> </ul> </li> <li>List the available distribution <code class="language-plaintext highlighter-rouge">wsl --list -o</code> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-05-24-wsl-linux-distributions.png"/> </div> </div> <p><br/></p> </li> <li>Install a distribution <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> wsl <span class="nt">--install</span> <span class="nt">-d</span> &lt;distrib_name&gt;
</code></pre></div> </div> </li> <li>Checks <ul> <li><code class="language-plaintext highlighter-rouge">wsl --list -v</code> should show the linux is running in WSL2 <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-05-24-wsl-wsl2.png"/> </div> </div> <p><br/></p> </li> <li>you can check WSL is on via “Turn Windows features on or off” <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-05-24-wsl-windows-features.png"/> </div> </div> </li> </ul> </li> </ol> <h2 id="installation-on-a-non-system-drive">Installation on a Non-System Drive</h2> <p>If you want to <em>ensure your Windows system or user profile can be reinitialised</em> without impacting your Linux you may want to deploy this latter on a non system drive (e.g.: D:\wsl\Ubuntu_2204.0.10.0_x64 in my case)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wsl --set-default-version 2
Invoke-WebRequest -Uri https://aka.ms/wslubuntu2204 -OutFile Ubuntu.appx -UseBasicParsing
move .\Ubuntu_2204.0.10.0_x64.appx Ubuntu_2204.0.10.0_x64.zip
Expand-Archive .\Ubuntu2204-220620.zip
cd .\Ubuntu2204-220620\
Expand-Archive .\Ubuntu_2204.0.10.0_x64.zip
ubuntu2204.exe --ui=none
</code></pre></div></div> <h2 id="known-issues">Known Issues</h2> <div class="alert alert-danger" role="alert"><i class="fa fa-exclamation-circle"> DNS configuration is not kept by default across your Linux restart under WSL. </i></div> <p>You can find your DNS running <code class="language-plaintext highlighter-rouge">nslookup</code> under Windows command and then update <code class="language-plaintext highlighter-rouge">etc/resolv.conf</code> with on WSL e.g.: for google DNS</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>bash <span class="nt">-c</span> <span class="s1">'echo "nameserver 8.8.8.8" &gt;&gt; /etc/resolv.conf'</span><span class="sb">`</span>
</code></pre></div></div> <p>to keep the change you can follow the solution <a href="https://stackoverflow.com/a/67429140">here</a> otherwise it has been noted the file is reset periodically. <code class="language-plaintext highlighter-rouge">cat /etc/wsl.conf</code> and enter the following option</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[network]
generateResolvConf = false
</code></pre></div></div> <p>Then simply follow the below recipie</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /etc/
sudo rm resolv.conf
cd /run
sudo rm resolvconf/resolv.conf
sudo vi /etc/resolv.conf + insert your config
</code></pre></div></div> <p>You can validate it works fine</p> <ul> <li>running from Powershell to restart WSL and check it works <code class="language-plaintext highlighter-rouge">wsl --shutdown</code></li> <li>connecting againg to your WSL and <code class="language-plaintext highlighter-rouge">ping google.com</code></li> </ul> <h2 id="developer-tools">Developer Tools</h2> <p>You can pamper yourself installing <a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab">Windows Terminal</a></p> <p>Last but not least if you are a developer you may consider the plugin for <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">VSCode plugin</a>; you can then start VSCode simply with <code class="language-plaintext highlighter-rouge">code .</code> from any directory under linux.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-05-24-wsl-windows-terminal.png"/> </div> </div> <p><br/></p> <h2 id="network">Network</h2> <p>You can access your filesystem in the explorer via <code class="language-plaintext highlighter-rouge">\\wsl$</code></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-05-24-wsl-explorer.png"/> </div> </div> <p><br/></p> <h3 id="you-are-all-set">You are all set!</h3>]]></content><author><name></name></author><category term="windows"/><category term="linux"/><category term="wsl"/><summary type="html"><![CDATA[A quick note about the installation of windows subsystem for Linux because it simply rocks!]]></summary></entry><entry><title type="html">Jekyll, Make your Website on Github</title><link href="https://kdefombelle.github.io/blog/2021/jekyll/" rel="alternate" type="text/html" title="Jekyll, Make your Website on Github"/><published>2021-05-18T16:00:00+00:00</published><updated>2021-05-18T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2021/jekyll</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2021/jekyll/"><![CDATA[<p>You can use <a href="https://jekyllrb.com/">jekyll</a> to build your own static <strong>web site for every github repository</strong>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-05-19-jekyll-logo.png"/> </div> </div> <p><br/> It is a powerfull tool enabling to combine <a href="https://shopify.github.io/liquid/">Liquid</a> template language, markdown and html. Github repository is by default built from a branch called <code class="language-plaintext highlighter-rouge">gh-pages</code>, the easiest is to follow this convention (you can tweak this in your repository under <em>Settings &gt; Pages &gt; Source</em>).</p> <h1 id="installation">Installation</h1> <p>For all OS set the folder (otherwise you will risk rights issues) <code class="language-plaintext highlighter-rouge">export BUNDLE_PATH=~/.gems</code> You can refer to <a href="https://jekyllrb.com/tutorials/using-jekyll-with-bundler/">jekyll with bundler</a> for further details.</p> <h2 id="a-ubuntu">a. Ubuntu</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>ruby-full
<span class="nb">sudo </span>apt <span class="nb">install </span>bundler
</code></pre></div></div> <p>You can check ruby is correctly installed</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ruby</span> <span class="nt">--version</span>
<span class="nv">$ruby</span> 3.0.2p107 <span class="o">(</span>2021-07-07 revision 0db68f0233<span class="o">)</span> <span class="o">[</span>x86_64-linux-gnu]
</code></pre></div></div> <h2 id="b-macos">b. MacOS</h2> <p>You need to install <code class="language-plaintext highlighter-rouge">ruby</code> (which will include <code class="language-plaintext highlighter-rouge">bundler</code>). You can do so using <a href="https://brew.sh/">homebrew</a></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>ruby@2.7
</code></pre></div></div> <p>NB: it did not work for me with latest Ruby 3.x but worked like a charm with 2.7</p> <p>Add ruby and its gems to your path</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'export PATH="/usr/local/lib/ruby/gems/2.7.0/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> /Users/username/.bash_profile
<span class="nb">echo</span> <span class="s1">'export PATH="/usr/local/opt/ruby@2.7:$PATH"'</span> <span class="o">&gt;&gt;</span> /Users/username/.bash_profile
</code></pre></div></div> <p>refresh your environment</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bash_profile
</code></pre></div></div> <h2 id="c-fedora">c. Fedora</h2> <p>You can follow instructions from https://gainanov.pro/eng-blog/linux/installing-jekyll-fedora/</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>dnf <span class="nb">install </span>ImageMagick
</code></pre></div></div> <h1 id="scaffolding">Scaffolding</h1> <p>Go to the directory you want to create your repository website in</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> &lt;your_new_repo_folder&gt; <span class="o">&amp;&amp;</span> <span class="nb">cd</span> &lt;your_new_repo_folder&gt;
bundle init
<span class="nb">sudo </span>bundler add jekyll
bundler <span class="nb">exec </span>jekyll new <span class="nt">--force</span> <span class="nt">--skip-bundle</span> <span class="nb">.</span>
</code></pre></div></div> <h1 id="test">Test</h1> <p>You can run locally your website and adjust what’s needed</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundler <span class="nb">install
</span>bundler <span class="nb">exec </span>jekyll serve <span class="nt">--livereload</span>
</code></pre></div></div> <p>It will print the url you can access to visualise your site.</p> <h1 id="look-and-feel">Look and Feel</h1> <p>To go beyond this simple introduction you may want to leverage existing <a href="https://github.com/topics/jekyll-template">templates</a>, do not hesitate to have a look pick one or create your own.</p> <h1 id="troubleshooting">Troubleshooting</h1> <ul> <li>the site does not refresh once pushed on ghithub <ul> <li>you can check under you repository <em>Settings &gt; Pages</em> If everything went well you should see below message, otherwise you may get a hint of the issue</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-05-19-jekyll-github.png"/> </div> </div> <p><br/></p> <ul> <li>also if you notice your site is not refreshing, you can try to push an empty commit to force a refresh</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git commit <span class="nt">-m</span> <span class="s1">'rebuild pages'</span> <span class="nt">--allow-empty</span>
  git push origin gh-pages
</code></pre></div> </div> </li> <li>install ImageMagick for <a href="https://github.com/alshedivat/al-folio">al-folio</a> theme</li> </ul> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>pkg-config
<span class="nb">sudo </span>apt-get <span class="nb">install </span>imagemagick libmagickwand-dev
</code></pre></div></div>]]></content><author><name></name></author><category term="tools"/><category term="jekyll"/><category term="github"/><summary type="html"><![CDATA[You can use jekyll to build your own static web site for every github repository. It is a powerfull tool enabling to combine Liquid template language, markdown and html. Github repository is by default built from a branch called gh-pages, the easiest is to follow this convention (you can tweak this in your repository under Settings &gt; Pages &gt; Source). Installation For all OS set the folder (otherwise you will risk rights issues) export BUNDLE_PATH=~/.gems You can refer to jekyll with bundler for further details. a. Ubuntu sudo apt update sudo apt install ruby-full sudo apt install bundler You can check ruby is correctly installed $ruby --version $ruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [x86_64-linux-gnu] b. MacOS You need to install ruby (which will include bundler). You can do so using homebrew brew install ruby@2.7 NB: it did not work for me with latest Ruby 3.x but worked like a charm with 2.7 Add ruby and its gems to your path echo 'export PATH="/usr/local/lib/ruby/gems/2.7.0/bin:$PATH"' &gt;&gt; /Users/username/.bash_profile echo 'export PATH="/usr/local/opt/ruby@2.7:$PATH"' &gt;&gt; /Users/username/.bash_profile refresh your environment source ~/.bash_profile c. Fedora You can follow instructions from https://gainanov.pro/eng-blog/linux/installing-jekyll-fedora/ sudo dnf install ImageMagick Scaffolding Go to the directory you want to create your repository website in mkdir &lt;your_new_repo_folder&gt; &amp;&amp; cd &lt;your_new_repo_folder&gt; bundle init sudo bundler add jekyll bundler exec jekyll new --force --skip-bundle . Test You can run locally your website and adjust what’s needed bundler install bundler exec jekyll serve --livereload It will print the url you can access to visualise your site. Look and Feel To go beyond this simple introduction you may want to leverage existing templates, do not hesitate to have a look pick one or create your own. Troubleshooting the site does not refresh once pushed on ghithub you can check under you repository Settings &gt; Pages If everything went well you should see below message, otherwise you may get a hint of the issue also if you notice your site is not refreshing, you can try to push an empty commit to force a refresh git commit -m 'rebuild pages' --allow-empty git push origin gh-pages install ImageMagick for al-folio theme sudo apt install pkg-config sudo apt-get install imagemagick libmagickwand-dev]]></summary></entry><entry><title type="html">Golang Discovery</title><link href="https://kdefombelle.github.io/blog/2021/golang-discovery/" rel="alternate" type="text/html" title="Golang Discovery"/><published>2021-03-31T16:00:00+00:00</published><updated>2021-03-31T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2021/golang-discovery</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2021/golang-discovery/"><![CDATA[<p>After years of Java, JavaScript (or TypeScript), and SQL I wanted to discover a new language with some different features. Reading about the heavyweights Python and Golang they were the two very appealing to me…<strong>and I picked Go :-)</strong></p> <h2 id="first-contact">First Contact</h2> <p>First contact from <a href="https://golang.org/">official website</a> was smooth and installation easy even I had to read about GOPATH, GOBIN and other GO not that important at the end variables. As most of developer nowadays I chose to try it out in VSCode which has all the necessary tooling to code in Go: it has a nice <a href="https://marketplace.visualstudio.com/items?itemName=golang.go">Go VSCode extension</a> and integration is good, simply had to wait a couple of minutes that it downloads its associated tools.</p> <p>One thing which I noticed quickly is <strong>most of the important features often requiring many 3rd parties in other languages are part of the standard Go library</strong> e.g.: IO, time, JSON or HTTP support are all part of the core. I cannot forget to quote one of Golang most famous features: the parallelism with its unique goroutines.</p> <p>Also the tooling, <strong>most of the necessary resources a developer needs are included in go</strong>: the formatting, the dependencies management, the test, the coverage, the performance tests, the vendoring if necessary and many others.</p> <p>Go produces compiled executable that are platform specific and every binary embeds the compiled Go runtime. Therefore your Go program can run without any dependencies on the installation. Note you can cross compile Go programs: e.g. compiliung on MacOS for Linux.</p> <p>Then I started coding as…well…this is what I wanted to do right? I could have used the <a href="https://play.golang.org/">Go playground</a> if I knew about it before but I would have faced quickly some limitations not having set up my dev environment. Also the ecosystem is important in the assessment.</p> <p>I created my first module and started (for go get reference refer <a href="https://golang.org/pkg/cmd/go/internal/get/">here</a></p> <h2 id="first-impression">First Impression</h2> <p>Go syntax is pleasant, not verbose and get rid of many superfluous characters typing in other languages. It is also powerful, I retrieved the playful pointers that I handled much more during my studies (learning programming in C++ at the time) than in my career but Go language is more developer friendly and safer for the application as <strong>it includes a garbage collector</strong>.</p> <p>By all the benchmarks Go is fast and has low memory footprint.</p> <p>No inheritance but easy composition, interfaces which enables mocking and good testability: you are up to speed quickly coding in Go especially that the compiler is really helpful. A lot of over complicated or bad practices are simply not allowed and Go keeps things simple for the sake of the language and your applications maintainability. As gophers often say or write: it is idiomatic: i.e. the way some code is written is specific to Go and it has to be done this way to be elegant / optimal in Go.</p> <p>Below a few takeaways from my first coding and language experimentation</p> <h2 id="types">Types</h2> <h3 id="primitives-types">Primitives Types</h3> <p><strong>Literals</strong> refers to <em>number, character, or string</em></p> <p><code class="language-plaintext highlighter-rouge">int8</code> to <code class="language-plaintext highlighter-rouge">int64</code>, <code class="language-plaintext highlighter-rouge">uint8</code> (<code class="language-plaintext highlighter-rouge">byte</code>) to <code class="language-plaintext highlighter-rouge">uint64</code>; most often you will use anyway <code class="language-plaintext highlighter-rouge">int</code> or <code class="language-plaintext highlighter-rouge">uint</code> types (that are not consistent across platforms)</p> <div class="alert alert-primary d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg> <div class="blogalert"> <strong>strconv</strong> package may help to go from one type to another. Most commonly used methods are <i>FormatInt/FormatUint</i> and <i>ParseInt/ParseUint</i> </div> </div> <p><strong>Floating point literals</strong> <code class="language-plaintext highlighter-rouge">float32</code> or <code class="language-plaintext highlighter-rouge">float64</code>.</p> <div class="alert alert-primary d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg> <div class="blogalert"> In absence of specific reason pick float64. </div> </div> <p><strong>Rune literals</strong> represent characters and are surrounded by single quotes.</p> <p><code class="language-plaintext highlighter-rouge">bool</code> for booleans</p> <p><code class="language-plaintext highlighter-rouge">time</code></p> <pre><code class="language-Go">const shortForm = "2006-01-02"
birthday := u.Birthday.Format(shortForm)
</code></pre> <p>Declaration:</p> <pre><code class="language-Go">var s string //declaration only
var s string = "hello"//declaration and assignment at once
s := "hello" //declaration and assignment at performance, short form
</code></pre> <h3 id="composite-types">Composite Types</h3> <p>It includes <strong>array</strong>, <strong>slice</strong>, <strong>map</strong></p> <p>Declaration:</p> <ul> <li>array</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var zeroValuesAray [3]int
var array = [3]int{1,2,3}
var array = [...]int{1,2,3}
</code></pre></div></div> <ul> <li>slice</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var nilSlice []int
slice := make([]int, 3, 5) // make(type, len, initial capacity).
var slice = []int{1,2,3} //declaring and initialising
var slice = []int{1,3:3} //skipping some index, gives {1,0,3}
var slice = []int{} //empty slice for JSON serialisation for instance
</code></pre></div></div> <ul> <li>map</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var nilMap map[string]int
map := map[string]int{}
mapInhabitants := map[string][]string {
  "England": 580000,
  "Spain": 48000000,
  "France": 60000000,
}
mapInhabitants := make(map[int][]string, 3)
</code></pre></div></div> <h4 id="more-about-slices">More About Slices</h4> <p><code class="language-plaintext highlighter-rouge">len</code> returns the , len of a nil slice is 0</p> <p><code class="language-plaintext highlighter-rouge">append</code> to add content to a slice <code>slice = append(slice, "newValue")</code></p> <p><code class="language-plaintext highlighter-rouge">cap</code> represents the memory allocated, a slice can have for instance a capacity of 4 but a length of 3: it contains 3 elements but the slice structure has been allocated to receive up to 4, till its next extension while appending elements. cap should obvisouly always be &gt;= len.</p> <p><code class="language-plaintext highlighter-rouge">slicing</code> Coming back on our previous declaration example <code>x := make([]int, 3, 5) // make(type, len, initial capacity)</code>; it will create an array {0, 0, 0} with a len of 3 initialised with zero values and an initial capacity of 5.</p> <p>You can subset slices with syntax slice[startOffset:endOfset]</p> <pre><code class="language-Go">whole := []int{1,2,3,4,5}
left := whole[:2]   // [1,2]
right := whole[2:]  // [3,4,5]
</code></pre> <div class="alert alert-warning d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#exclamation-triangle-fill"/></svg> <div class="blogalert"> Sliced slices share memory and so modifying one amend the other.<br/> </div> </div> <div class="alert alert-warning d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#exclamation-triangle-fill"/></svg> <div class="blogalert"> Be very careful with a slice of string: all characters are not always 1 byte. </div> </div> <p><code class="language-plaintext highlighter-rouge">copy</code> copies as many values as it can from source to destination, limited by whichever slice is smaller, and returns the number of elements copied.</p> <pre><code class="language-Go">i := copy(destination, source)
</code></pre> <h3 id="zero-values">Zero Values</h3> <table class="table"> <colgroup> <col width="50%"/> <col width="50%"/> </colgroup> <thead class="thead-light"> <tr> <th>Type</th> <th>Zero Value</th> </tr> </thead> <tbody> <tr> <td> <code>int</code> (and variations) </td> <td>0</td> </tr> <tr> <td> <code>array</code> </td> <td>zero values of the type of the array</td> </tr> <tr> <td> <code>slice</code> </td> <td>nil</td> </tr> <tr> <td> <code>string</code> </td> <td>empty string</td> </tr> <tr> <td> <code>map</code> </td> <td>nil</td> </tr> </tbody> </table> <h2 id="logging">Logging</h2> <p>https://golang.org/pkg/fmt/</p> <h2 id="control-structure">Control Structure</h2> <p>Iterate over strings</p> <pre><code class="language-Go">random := "random"
for i, r := range sample { //iterate over the runes of the string
    fmt.Println(i, r, string(r))
}
</code></pre> <p>Iterate over maps</p> <pre><code class="language-Go">for k, v := range m {
    fmt.Println(k, v)
}
</code></pre> <div class="alert alert-primary d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg> <div class="blogalert"> <strong>The comma ok Idiom</strong><br/> As a map returns the zerol value for the key when there is no match for the key if you want to distinguish between a miss and a zero value you need to use the comma ok idiom.<br/> <code> v, ok := m["Spain"] </code> </div> </div> <h2 id="go-testing">Go Testing</h2> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">test</span> ./...
</code></pre></div></div> <p>verbose go test -timeout 30s -run ^TestFindPdcsByDivision$ bitbucket.org/kdefombelle/ver1rev-backend/http/rest</p> <p>clear go test cache</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go clean <span class="nt">-testcache</span>
</code></pre></div></div> <h1 id="database-driver">Database Driver</h1> <p>Install a database driver e.g. for mysql with <a href="https://github.com/Go-SQL-Driver/MySQL/">go-sql-driver</a></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get -u github.com/go-sql-driver/mysql
</code></pre></div></div> <h1 id="go-and-open-api">Go and Open API</h1> <p><a href="https://goswagger.io/">go-swagger</a> <em>“There is no point in continuing to ask. I don’t have the time to spend on a openapi 3.0 implementation”</em> as per <a href="https://github.com/go-swagger/go-swagger/issues/1122#issuecomment-575968499">this issue comment</a></p> <p>It is part of Open API 3.0.x; Swagger documents about <a href="https://swagger.io/docs/specification/authentication/cookie-authentication/">it</a>…but does not support it as explained in this <a href="https://github.com/swagger-api/swagger-editor/issues/1951">github ticket</a> (except documentation is hosted on SwaggerHub)</p>]]></content><author><name></name></author><category term="go"/><summary type="html"><![CDATA[After years of Java, JavaScript (or TypeScript), and SQL I wanted to discover a new language with some different features. Reading about the heavyweights Python and Golang they were the two very appealing to me…and I picked Go :-) First Contact First contact from official website was smooth and installation easy even I had to read about GOPATH, GOBIN and other GO not that important at the end variables. As most of developer nowadays I chose to try it out in VSCode which has all the necessary tooling to code in Go: it has a nice Go VSCode extension and integration is good, simply had to wait a couple of minutes that it downloads its associated tools. One thing which I noticed quickly is most of the important features often requiring many 3rd parties in other languages are part of the standard Go library e.g.: IO, time, JSON or HTTP support are all part of the core. I cannot forget to quote one of Golang most famous features: the parallelism with its unique goroutines. Also the tooling, most of the necessary resources a developer needs are included in go: the formatting, the dependencies management, the test, the coverage, the performance tests, the vendoring if necessary and many others. Go produces compiled executable that are platform specific and every binary embeds the compiled Go runtime. Therefore your Go program can run without any dependencies on the installation. Note you can cross compile Go programs: e.g. compiliung on MacOS for Linux. Then I started coding as…well…this is what I wanted to do right? I could have used the Go playground if I knew about it before but I would have faced quickly some limitations not having set up my dev environment. Also the ecosystem is important in the assessment. I created my first module and started (for go get reference refer here First Impression Go syntax is pleasant, not verbose and get rid of many superfluous characters typing in other languages. It is also powerful, I retrieved the playful pointers that I handled much more during my studies (learning programming in C++ at the time) than in my career but Go language is more developer friendly and safer for the application as it includes a garbage collector. By all the benchmarks Go is fast and has low memory footprint. No inheritance but easy composition, interfaces which enables mocking and good testability: you are up to speed quickly coding in Go especially that the compiler is really helpful. A lot of over complicated or bad practices are simply not allowed and Go keeps things simple for the sake of the language and your applications maintainability. As gophers often say or write: it is idiomatic: i.e. the way some code is written is specific to Go and it has to be done this way to be elegant / optimal in Go. Below a few takeaways from my first coding and language experimentation Types Primitives Types Literals refers to number, character, or string int8 to int64, uint8 (byte) to uint64; most often you will use anyway int or uint types (that are not consistent across platforms) strconv package may help to go from one type to another. Most commonly used methods are FormatInt/FormatUint and ParseInt/ParseUint Floating point literals float32 or float64. In absence of specific reason pick float64. Rune literals represent characters and are surrounded by single quotes. bool for booleans time const shortForm="2006-01-02" birthday := u.Birthday.Format(shortForm) Declaration: var s string //declaration only var s string="hello"//declaration and assignment at once s := "hello" //declaration and assignment at performance, short form Composite Types It includes array, slice, map Declaration: array var zeroValuesAray [3]int var array=[3]int{1,2,3} var array=[...]int{1,2,3} slice var nilSlice []int slice := make([]int, 3, 5) // make(type, len, initial capacity). var slice=[]int{1,2,3} //declaring and initialising var slice=[]int{1,3:3} //skipping some index, gives {1,0,3} var slice=[]int{} //empty slice for JSON serialisation for instance map var nilMap map[string]int map := map[string]int{} mapInhabitants := map[string][]string { "England": 580000, "Spain": 48000000, "France": 60000000, } mapInhabitants := make(map[int][]string, 3) More About Slices len returns the , len of a nil slice is 0 append to add content to a slice slice=append(slice, "newValue") cap represents the memory allocated, a slice can have for instance a capacity of 4 but a length of 3: it contains 3 elements but the slice structure has been allocated to receive up to 4, till its next extension while appending elements. cap should obvisouly always be &gt;= len. slicing Coming back on our previous declaration example x := make([]int, 3, 5) // make(type, len, initial capacity); it will create an array {0, 0, 0} with a len of 3 initialised with zero values and an initial capacity of 5. You can subset slices with syntax slice[startOffset:endOfset] whole := []int{1,2,3,4,5} left := whole[:2] // [1,2] right := whole[2:] // [3,4,5] Sliced slices share memory and so modifying one amend the other. Be very careful with a slice of string: all characters are not always 1 byte. copy copies as many values as it can from source to destination, limited by whichever slice is smaller, and returns the number of elements copied. i := copy(destination, source) Zero Values Type Zero Value int (and variations) 0 array zero values of the type of the array slice nil string empty string map nil Logging https://golang.org/pkg/fmt/ Control Structure Iterate over strings random := "random" for i, r := range sample { //iterate over the runes of the string fmt.Println(i, r, string(r)) } Iterate over maps for k, v := range m { fmt.Println(k, v) } The comma ok Idiom As a map returns the zerol value for the key when there is no match for the key if you want to distinguish between a miss and a zero value you need to use the comma ok idiom. v, ok := m["Spain"] Go Testing go test ./... verbose go test -timeout 30s -run ^TestFindPdcsByDivision$ bitbucket.org/kdefombelle/ver1rev-backend/http/rest clear go test cache go clean -testcache Database Driver Install a database driver e.g. for mysql with go-sql-driver go get -u github.com/go-sql-driver/mysql Go and Open API go-swagger “There is no point in continuing to ask. I don’t have the time to spend on a openapi 3.0 implementation” as per this issue comment It is part of Open API 3.0.x; Swagger documents about it…but does not support it as explained in this github ticket (except documentation is hosted on SwaggerHub)]]></summary></entry><entry><title type="html">MySQL Installation Notes (Windows)</title><link href="https://kdefombelle.github.io/blog/2021/mysql/" rel="alternate" type="text/html" title="MySQL Installation Notes (Windows)"/><published>2021-03-14T16:00:00+00:00</published><updated>2021-03-14T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2021/mysql</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2021/mysql/"><![CDATA[<h2 id="windows">Windows</h2> <p>Download installer from <a href="https://dev.mysql.com/downloads/installer/">here</a></p> <p>Not my.ini is located under <em>C:\ProgramData\MySQL\MySQL Server 8.0\my.ini</em></p> <h2 id="start-mysql-server">Start Mysql Server</h2> <ul> <li>Run a console as Admin</li> <li>Start the server</li> </ul> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD
<span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD
<span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> minor layout improvements
<span class="o">=======</span>
<span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> merge image optim and minor changes
<span class="o">=======</span>
<span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> ff22a9bd014e6f9bdd540cee88f173c63a09f8dd
mysqld <span class="nt">--datadir</span> <span class="s2">"C:</span><span class="se">\P</span><span class="s2">rogramData</span><span class="se">\M</span><span class="s2">ySQL</span><span class="se">\M</span><span class="s2">ySQL Server 8.0</span><span class="se">\D</span><span class="s2">ata"</span>
</code></pre></div></div> <h2 id="connecting">Connecting</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql -h &lt;host&gt; -u &lt;database&gt; -p
</code></pre></div></div> <h2 id="create-database">Create Database</h2> <p>Connect as root</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql.exe <span class="nt">-u</span> root <span class="nt">-p</span>
mysql&gt; show databases<span class="p">;</span>
mysql&gt; create database &lt;db_name&gt;<span class="p">;</span>
</code></pre></div></div> <div class="alert alert-primary d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg> <div class="blogalert"> in MySQL, CREATE SCHEMA is a synonym for CREATE DATABASE </div> </div> <h2 id="create-a-user">Create a User</h2> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">USER</span> <span class="o">&lt;</span><span class="k">user</span><span class="o">&gt;@&lt;</span><span class="k">host</span><span class="o">&gt;</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="o">&lt;</span><span class="n">password</span><span class="o">&gt;</span><span class="p">;</span>
<span class="k">GRANT</span> <span class="k">ALL</span> <span class="k">PRIVILEGES</span> <span class="k">ON</span> <span class="o">&lt;</span><span class="n">database_name</span><span class="o">&gt;</span><span class="p">.</span><span class="o">*</span> <span class="k">TO</span> <span class="o">&lt;</span><span class="k">user</span><span class="o">&gt;@&lt;</span><span class="k">host</span><span class="o">&gt;</span><span class="p">;</span>
<span class="n">FLUSH</span> <span class="k">PRIVILEGES</span>
</code></pre></div></div> <h2 id="create-tables">Create Tables</h2> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="n">users</span><span class="p">(</span>
	<span class="n">user_id</span> <span class="nb">INT</span> <span class="n">AUTO_INCREMENT</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
	<span class="n">username</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="n">password</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
	<span class="k">role</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">null</span>
<span class="p">);</span>
</code></pre></div></div> <h2 id="insert-values">Insert Values</h2> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">users</span> <span class="k">VALUES</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">"root"</span><span class="p">,</span> <span class="nv">"password"</span><span class="p">,</span> <span class="nv">"admin"</span><span class="p">);</span>
</code></pre></div></div> <h2 id="connect-a-database-client">Connect a Database Client</h2> <p>Using Dbeaver</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-03-15-mysql-dbeaver.png"/> </div> </div> <p><br/></p> <h2 id="change-user-password">Change User Password</h2> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">USER</span> <span class="s1">'myUser'</span><span class="o">@</span><span class="s1">'localhost'</span> <span class="n">IDENTIFIED</span> <span class="k">BY</span> <span class="s1">'myNewPassword'</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="database"/><category term="mysql"/><summary type="html"><![CDATA[Windows Download installer from here Not my.ini is located under C:\ProgramData\MySQL\MySQL Server 8.0\my.ini Start Mysql Server Run a console as Admin Start the server &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD &gt;&gt;&gt;&gt;&gt;&gt;&gt; minor layout improvements======= &gt;&gt;&gt;&gt;&gt;&gt;&gt; merge image optim and minor changes======= &gt;&gt;&gt;&gt;&gt;&gt;&gt; ff22a9bd014e6f9bdd540cee88f173c63a09f8dd mysqld --datadir "C:\ProgramData\MySQL\MySQL Server 8.0\Data" Connecting mysql -h &lt;host&gt; -u &lt;database&gt; -p Create Database Connect as root mysql.exe -u root -p mysql&gt; show databases; mysql&gt; create database &lt;db_name&gt;; in MySQL, CREATE SCHEMA is a synonym for CREATE DATABASE Create a User CREATE USER &lt;user&gt;@&lt;host&gt; IDENTIFIED BY &lt;password&gt;; GRANT ALL PRIVILEGES ON &lt;database_name&gt;.* TO &lt;user&gt;@&lt;host&gt;; FLUSH PRIVILEGES Create Tables CREATE TABLE IF NOT EXISTS users( user_id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(255) NOT NULL, password VARCHAR(255) NOT NULL, role VARCHAR(255) NOT null ); Insert Values INSERT INTO users VALUES(1, "root", "password", "admin"); Connect a Database Client Using Dbeaver Change User Password ALTER USER 'myUser'@'localhost' IDENTIFIED BY 'myNewPassword';]]></summary></entry><entry><title type="html">Micronaut OpenAPI</title><link href="https://kdefombelle.github.io/blog/2021/micronaut-openapi/" rel="alternate" type="text/html" title="Micronaut OpenAPI"/><published>2021-02-28T16:00:00+00:00</published><updated>2021-02-28T16:00:00+00:00</updated><id>https://kdefombelle.github.io/blog/2021/micronaut-openapi</id><content type="html" xml:base="https://kdefombelle.github.io/blog/2021/micronaut-openapi/"><![CDATA[<p>As we all know <a href="https://spring.io/">Spring</a> there is now a lightweigth and claimed more efficient framework called <a href="https://micronaut.io/">Micronaut</a>. The key difference is it instruments the code AOT (ahead of time) ensuring less memory footprint (less caching, less dymanic proxy to be created) and so a quicker start time.</p> <div class="alert alert-success d-flex align-items-center" role="alert"> <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg> <div class="blogalert"> Note this sample application can be found on my git repository, check it out <a href="https://github.com/kdefombelle/micronaut-sample">here</a> </div> </div> <h2 id="cli-installation">Cli Installation</h2> <p>Micronaut has a CLI to scaffold your application</p> <div class="howto"> <ol> <li>install micronaut-cli using a package manager as per <a href="https://micronaut-projects.github.io/micronaut-starter/latest/guide/index.html#installChocolatey">Micronaut documentation</a></li><br/> <div class="row"> <div class="col-sm-6"> <div class="card"> <div class="card-body"> <h5 class="card-title">Windows</h5> <p class="card-text">Using <a href="https://chocolatey.org/">Chocolatey</a><br/> <br/><code>choco install micronaut</code> </p> </div> </div> </div> <div class="col-sm-6"> <div class="card"> <div class="card-body"> <h5 class="card-title">Ubuntu</h5> <p class="card-text"> With <a href="https://sdkman.io/">SDKMAN</a><br/><br/> <code>sdk install micronaut</code> </p> </div> </div> </div> </div> <br/> <li>ensure <code>$MICRONAUT_CLI_HOME/bin</code> to <code>PATH</code>; it will be referred as <code>mn</code></li> <li>check installation <code>mn --version</code></li> </ol> </div> <p><br/></p> <h2 id="sample-application">Sample Application</h2> <p>You can use Mirconaut CLI to initiate your application</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> mn create-app hello-world <span class="nt">--build</span> maven <span class="nt">--features</span> openapi
</code></pre></div></div> <p>The project is scaffolded and the main class is generated</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Micronaut</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>You can start adding a Controller to spawn a server side application</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span><span class="o">(</span><span class="s">"/service"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServiceController</span> <span class="o">{</span>

  <span class="nd">@Post</span><span class="o">(</span><span class="s">"execute"</span><span class="o">)</span>
  <span class="nd">@Status</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">Single</span><span class="o">&lt;</span><span class="nc">Result</span><span class="o">&gt;</span> <span class="nf">execute</span><span class="o">(</span><span class="nd">@Body</span> <span class="nc">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Result</span><span class="o">();</span>
    <span class="n">result</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span>
    <span class="k">return</span> <span class="nc">Single</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div> <p>To compile or build simply run <code class="language-plaintext highlighter-rouge">mvn compile</code> or <code class="language-plaintext highlighter-rouge">mvn install</code>, or use <code class="language-plaintext highlighter-rouge">mn</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvnw mn:run
</code></pre></div></div> <h3 id="maven-dependencies">Maven Dependencies</h3> <p>In in your maven pom.xml</p> <ul> <li>add compile dependencies</li> </ul> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>javax.annotation<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>javax.annotation-api<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>io.swagger.core.v3<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>swagger-annotations<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;scope&gt;</span>compile<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div> <ul> <li>configure annotation processor</li> </ul> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;plugin&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;configuration&gt;</span>
		<span class="nt">&lt;annotationProcessorPaths</span> <span class="na">combine.children=</span><span class="s">"append"</span><span class="nt">&gt;</span>
			<span class="nt">&lt;path&gt;</span>
				<span class="nt">&lt;groupId&gt;</span>io.micronaut.openapi<span class="nt">&lt;/groupId&gt;</span>
				<span class="nt">&lt;artifactId&gt;</span>micronaut-openapi<span class="nt">&lt;/artifactId&gt;</span>
				<span class="nt">&lt;version&gt;</span>${micronaut.openapi.version}<span class="nt">&lt;/version&gt;</span>
			<span class="nt">&lt;/path&gt;</span>
		<span class="nt">&lt;/annotationProcessorPaths&gt;</span>
		<span class="nt">&lt;compilerArgs&gt;</span>
			<span class="nt">&lt;arg&gt;</span>-Amicronaut.processing.group=fr.kdefombelle.app<span class="nt">&lt;/arg&gt;</span>
			<span class="nt">&lt;arg&gt;</span>-Amicronaut.processing.module=app-service<span class="nt">&lt;/arg&gt;</span>
		<span class="nt">&lt;/compilerArgs&gt;</span>
	<span class="nt">&lt;/configuration&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div></div> <h2 id="swagger">Swagger</h2> <p>Reference documentation is <a href="https://micronaut-projects.github.io/micronaut-openapi/latest/guide/index.html/">Micronaut Open API</a></p> <p>In your application properties point swagger static resources</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">micronaut</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">sample</span>
  <span class="na">router</span><span class="pi">:</span>
    <span class="na">static-resources</span><span class="pi">:</span>
      <span class="na">swagger</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span> <span class="s">classpath:META-INF/swagger</span>
        <span class="na">mapping</span><span class="pi">:</span> <span class="s">/swagger/**</span>
      <span class="na">swagger-ui</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span> <span class="s">classpath:META-INF/swagger/views/swagger-ui</span>
        <span class="na">mapping</span><span class="pi">:</span> <span class="s">/swagger-ui/**</span>
</code></pre></div></div> <h2 id="document-the-api">Document the API</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Operation</span><span class="o">(</span>
    <span class="n">summary</span> <span class="o">=</span> <span class="s">"Double value"</span><span class="o">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s">"Simple webservice which doubles a value provided by the requester"</span><span class="o">)</span>
  <span class="nd">@ApiResponse</span><span class="o">(</span>
    <span class="n">responseCode</span> <span class="o">=</span> <span class="s">"201"</span><span class="o">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s">"Response object"</span><span class="o">,</span>
    <span class="n">content</span> <span class="o">=</span> <span class="nd">@Content</span><span class="o">(</span><span class="n">mediaType</span> <span class="o">=</span> <span class="s">"application/json"</span><span class="o">,</span>
      <span class="n">schema</span> <span class="o">=</span> <span class="nd">@Schema</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="s">"Response"</span><span class="o">)</span>
    <span class="o">)</span>
  <span class="o">)</span>
  <span class="nd">@ApiResponse</span><span class="o">(</span>
    <span class="n">responseCode</span> <span class="o">=</span> <span class="s">"400"</span><span class="o">,</span>
    <span class="n">description</span> <span class="o">=</span> <span class="s">"Response object"</span><span class="o">,</span>
    <span class="n">content</span> <span class="o">=</span> <span class="nd">@Content</span><span class="o">(</span>
      <span class="n">mediaType</span> <span class="o">=</span> <span class="s">"application/json"</span><span class="o">,</span>
      <span class="n">schema</span> <span class="o">=</span> <span class="nd">@Schema</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="s">"Response"</span><span class="o">)</span>
    <span class="o">)</span>
  <span class="o">)</span>
  <span class="nd">@Post</span><span class="o">(</span><span class="s">"execute"</span><span class="o">)</span>
  <span class="nd">@Status</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">Single</span><span class="o">&lt;</span><span class="nc">Result</span><span class="o">&gt;</span> <span class="nf">execute</span><span class="o">(</span><span class="nd">@Body</span> <span class="nc">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Result</span><span class="o">();</span>
    <span class="n">result</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span>
    <span class="k">return</span> <span class="nc">Single</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div></div> <h2 id="enable-swagger">Enable Swagger</h2> <p>Reference documentation is <a href="https://micronaut-projects.github.io/micronaut-openapi/latest/guide/index.html/">Micronaut Open API</a></p> <p>Create an <code class="language-plaintext highlighter-rouge">openapi.properties</code> file at the root of your project containing</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>swagger-ui.enabled<span class="o">=</span><span class="nb">true</span>
</code></pre></div></div> <p>In your application properties point swagger static resources, e.g.: in application.yml</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">micronaut</span><span class="pi">:</span>
  <span class="na">application</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">sample</span>
  <span class="na">router</span><span class="pi">:</span>
    <span class="na">static-resources</span><span class="pi">:</span>
      <span class="na">swagger</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span> <span class="s">classpath:META-INF/swagger</span>
        <span class="na">mapping</span><span class="pi">:</span> <span class="s">/swagger/**</span>
      <span class="na">swagger-ui</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span> <span class="s">classpath:META-INF/swagger/views/swagger-ui</span>
        <span class="na">mapping</span><span class="pi">:</span> <span class="s">/swagger-ui/**</span>
</code></pre></div></div> <h2 id="visualise">Visualise</h2> <p>To access swagger you can run your app and go to URL http://localhost:8080/swagger-ui</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/2021-03-01-micronaut-swagger.png"/> </div> </div>]]></content><author><name></name></author><category term="framework"/><category term="java"/><category term="maven"/><category term="openapi"/><category term="micronaut"/><summary type="html"><![CDATA[As we all know Spring there is now a lightweigth and claimed more efficient framework called Micronaut. The key difference is it instruments the code AOT (ahead of time) ensuring less memory footprint (less caching, less dymanic proxy to be created) and so a quicker start time.]]></summary></entry></feed>